 Web Service vs MicroWebservice 

El siguiente ejemplo combina múltiples funcionalidades en un mismo servicio

revisa como Este servicio tiene varias responsabilidades (/sensor y /health).
Es monolítico y centralizado

#####################################################################################

from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/sensor', methods=['GET'])
def sensor_status():
    """Devuelve el estado del sensor."""
    return jsonify({"sensor_status": 1})

@app.route('/health', methods=['GET'])
def health_check():
    """Devuelve el estado de salud del servidor."""
    return jsonify({"status": "running"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


 ######################################################################################

El diseño micro divide cada funcionalidad en servicios independientes. Por ejemplo, un servicio para el sensor: Sensor Service, veamos en los  codigos siguientes y mira como cada funcionalidad está encapsulada en un microservicio separado.
Los servicios corren en puertos diferentes (8080 para el sensor, 8081 para el estado de salud). 

#################################################################
from flask import Flask, jsonify
import random

app = Flask(__name__)

@app.route('/microsensor', methods=['GET'])
def sensor_status():
    """Devuelve el estado del sensor."""
    status = random.choice([0, 1])
    return jsonify({"sensor_status": status})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
######################################################################
Estado de Salud : 
#####################################################################
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/microhealth', methods=['GET'])
def health_status():
    """Devuelve el estado de salud."""
    return jsonify({"status": "running"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8081)
###############################################################

